// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RainChance.DAL.Context;

namespace RainChance.DAL.Migrations
{
    [DbContext(typeof(RainChanceContext))]
    [Migration("20181102102553_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RainChance.DL.Models.DayPrediction", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<double>("ApparentTemperatureHigh");

                    b.Property<DateTimeOffset>("ApparentTemperatureHighTime");

                    b.Property<double>("ApparentTemperatureLow");

                    b.Property<DateTimeOffset>("ApparentTemperatureLowTime");

                    b.Property<double>("ApparentTemperatureMax");

                    b.Property<DateTimeOffset>("ApparentTemperatureMaxTime");

                    b.Property<double>("ApparentTemperatureMin");

                    b.Property<DateTimeOffset>("ApparentTemperatureMinTime");

                    b.Property<double>("CloudCover");

                    b.Property<double>("DewPoint");

                    b.Property<double>("Humidity");

                    b.Property<double>("MoonPhase");

                    b.Property<double>("PrecipAccumulation");

                    b.Property<double>("PrecipIntensity");

                    b.Property<double>("PrecipIntensityMax");

                    b.Property<DateTimeOffset>("PrecipIntensityMaxTime");

                    b.Property<double>("PrecipProbability");

                    b.Property<string>("PrecipType");

                    b.Property<double>("Pressure");

                    b.Property<DateTimeOffset>("SunriseTime");

                    b.Property<DateTimeOffset>("SunsetTime");

                    b.Property<double>("TemperatureHigh");

                    b.Property<DateTimeOffset>("TemperatureHighTime");

                    b.Property<double>("TemperatureLow");

                    b.Property<DateTimeOffset>("TemperatureLowTime");

                    b.Property<double>("TemperatureMax");

                    b.Property<DateTimeOffset>("TemperatureMaxTime");

                    b.Property<double>("TemperatureMin");

                    b.Property<DateTimeOffset>("TemperatureMinTime");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("UvIndex");

                    b.Property<DateTimeOffset>("UvIndexTime");

                    b.Property<double>("Visibility");

                    b.Property<int>("WindBearing");

                    b.Property<double>("WindSpeed");

                    b.HasKey("Id");

                    b.ToTable("DayPrediction");
                });

            modelBuilder.Entity("RainChance.DL.Models.HourPrediction", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<double>("ApparentTemperature");

                    b.Property<double>("CloudCover");

                    b.Property<Guid>("DayPredictionId");

                    b.Property<double>("DewPoint");

                    b.Property<double>("Humidity");

                    b.Property<double>("PrecipIntensity");

                    b.Property<double>("PrecipProbability");

                    b.Property<double>("Pressure");

                    b.Property<double>("Temperature");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<double>("UvIndex");

                    b.Property<double>("Visibility");

                    b.Property<int>("WindBearing");

                    b.Property<double>("WindSpeed");

                    b.HasKey("Id");

                    b.HasIndex("DayPredictionId");

                    b.ToTable("HourPrediction");
                });

            modelBuilder.Entity("RainChance.DL.Models.HourPrediction", b =>
                {
                    b.HasOne("RainChance.DL.Models.DayPrediction", "DayPrediction")
                        .WithMany("HourPredictions")
                        .HasForeignKey("DayPredictionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
